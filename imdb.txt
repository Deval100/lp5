import numpy as np
from keras.datasets import imdb
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

(train_data, train_labels), (test_data, test_labels) = imdb.load_data(num_words = 10000)
print(test_labels)

def vectorize_sequences(sequences, dimension=10000):
    results = np.zeros((len(sequences), dimension))    # Creates an all zero matrix of shape (len(sequences),10K)
    for i,sequence in enumerate(sequences):
        results[i,sequence] = 1                        # Sets specific indices of results[i] to 1s
    return results

X_train = vectorize_sequences(train_data)
X_test = vectorize_sequences(test_data)

model = Sequential()
model.add(Dense(16, activation='relu', input_shape=(10000,)))
model.add(Dense(16, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['accuracy'])

history = model.fit(
    X_train,
    train_labels,
    epochs=20,
    batch_size=512,
    validation_split=0.2
)

result = model.predict(X_test)
print(result)

y_pred = np.zeros(len(result))
for i, score in enumerate(result):
    y_pred[i] = np.round(score)

from sklearn.metrics import accuracy_score

accuracy_score(y_pred,test_labels)